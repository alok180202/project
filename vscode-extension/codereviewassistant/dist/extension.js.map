{"version":3,"file":"extension.js","mappings":"23BAGA,oBAAyBA,GACvBA,EAAQC,cAAcC,KACpBC,EAAOC,SAASC,gBAAgB,0CAA0C,KACxE,MAAMC,EAASH,EAAOI,OAAOC,iBAE7B,IAAKF,EAEH,YADAH,EAAOI,OAAOE,iBAAiB,2BAIjC,MAAMC,EAAOJ,EAAOK,SAASC,UAGvBC,EAAQV,EAAOI,OAAOO,mBAC1B,sBACA,wBACAX,EAAOY,WAAWC,IAClB,CACEC,eAAe,EACfC,mBAAoB,CAClBf,EAAOgB,IAAIC,KACTC,EAAKC,KAAKtB,EAAQuB,cAAe,UAAW,cAOpDV,EAAMW,QAAQC,KAUpB,SAA2BD,EAAyBD,GAClD,MAAMG,EAAYF,EAAQG,aACxBxB,EAAOgB,IAAIC,KACTC,EAAKC,KAAKC,EAAe,UAAW,SAAU,KAAM,sBAUxD,MAAO,uPANQC,EAAQG,aACrBxB,EAAOgB,IAAIC,KACTC,EAAKC,KAAKC,EAAe,UAAW,SAAU,MAAO,mYAuBtCG,6CAIrB,CA9C2BE,CAAkBf,EAAMW,QAASxB,EAAQuB,eAG9DM,YAAW,KACThB,EAAMW,QAAQM,YAAY,CAAEC,KAAM,cAAerB,QAAO,GACvD,IAAI,IAGb,EAwCA,wBAA8B,EA/E9B,kBACA,W,UCDAsB,EAAOC,QAAUC,QAAQ,S,UCAzBF,EAAOC,QAAUC,QAAQ,O,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,CAAC,GAOX,OAHAQ,EAAoBH,GAAUI,KAAKV,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,OACf,CCnB0BI,CAAoB,K","sources":["webpack://codereviewassistant/./src/extension.ts","webpack://codereviewassistant/external commonjs \"vscode\"","webpack://codereviewassistant/external node-commonjs \"path\"","webpack://codereviewassistant/webpack/bootstrap","webpack://codereviewassistant/webpack/startup"],"sourcesContent":["import * as vscode from \"vscode\";\nimport * as path from \"path\";\n\nexport function activate(context: vscode.ExtensionContext) {\n  context.subscriptions.push(\n    vscode.commands.registerCommand(\"codereviewassistant.analyzeCurrentFile\", () => {\n      const editor = vscode.window.activeTextEditor;\n\n      if (!editor) {\n        vscode.window.showErrorMessage(\"No active editor found.\");\n        return;\n      }\n\n      const code = editor.document.getText(); // Get the code from the current file\n\n      // Create and show the webview panel\n      const panel = vscode.window.createWebviewPanel(\n        \"codeReviewAssistant\",\n        \"Code Review Assistant\",\n        vscode.ViewColumn.One,\n        {\n          enableScripts: true,\n          localResourceRoots: [\n            vscode.Uri.file(\n              path.join(context.extensionPath, \"webview\", \"static\")\n            )\n          ]\n        }\n      );\n\n      // Set the HTML content for the webview\n      panel.webview.html = getWebviewContent(panel.webview, context.extensionPath);\n\n      // Post the code to the webview\n      setTimeout(() => {\n        panel.webview.postMessage({ type: \"analyzeCode\", code });\n      }, 500);\n    })\n  );\n}\n\nfunction getWebviewContent(webview: vscode.Webview, extensionPath: string): string {\n  const scriptUri = webview.asWebviewUri(\n    vscode.Uri.file(\n      path.join(extensionPath, \"webview\", \"static\", \"js\", \"main.408d26ab.js\")\n    )\n  );\n\n  const cssUri = webview.asWebviewUri(\n    vscode.Uri.file(\n      path.join(extensionPath, \"webview\", \"static\", \"css\", \"main.1b1a381a.css\")\n    )\n  );\n\n  return `\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>Code Review Assistant</title>\n      <link rel=\"stylesheet\" href=\"${cssUri}\">\n      <script>\n        const vscode = acquireVsCodeApi();\n        window.addEventListener('message', (event) => {\n          if (event.data.type === 'analyzeCode') {\n            console.log('Code received in webview:', event.data.code);\n          }\n        });\n      </script>\n    </head>\n    <body>\n      <div id=\"root\"></div>\n      <script src=\"${scriptUri}\"></script>\n    </body>\n    </html>\n  `;\n}\n\nexport function deactivate() {}\n","module.exports = require(\"vscode\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["context","subscriptions","push","vscode","commands","registerCommand","editor","window","activeTextEditor","showErrorMessage","code","document","getText","panel","createWebviewPanel","ViewColumn","One","enableScripts","localResourceRoots","Uri","file","path","join","extensionPath","webview","html","scriptUri","asWebviewUri","getWebviewContent","setTimeout","postMessage","type","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}